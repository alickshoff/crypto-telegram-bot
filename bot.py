import logging
import requests
import socket
import matplotlib.pyplot as plt
from io import BytesIO

import nest_asyncio
nest_asyncio.apply()

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, JobQueue

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "7286598622:AAEOSZH4FK1Uh5wufaqVRzYBgBq8Y2ZQ_Hw"

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ===
def is_internet_available():
    try:
        socket.create_connection(("www.google.com", 80))
        return True
    except OSError:
        return False


# === –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìä RSI –∞–Ω–∞–ª–∏–∑", callback_data="rsi")],
        [InlineKeyboardButton("üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", callback_data="price")],
        [InlineKeyboardButton("üéØ –ü—Ä–∏–º–µ—Ä —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞", callback_data="entry")],
        [InlineKeyboardButton("üíß –û—Ü–µ–Ω–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏", callback_data="liquidity")],
        [InlineKeyboardButton("üìà –ù–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑", callback_data="forecast")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ ===
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "rsi":
        await rsi_handler(query, context)
    elif query.data == "price":
        await price_handler(query, context)
    elif query.data == "entry":
        await entry_handler(query, context)
    elif query.data == "liquidity":
        await liquidity_handler(query, context)
    elif query.data == "forecast":
        await forecast_handler(query, context)
    elif query.data == "back":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üìä RSI –∞–Ω–∞–ª–∏–∑", callback_data="rsi")],
            [InlineKeyboardButton("üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", callback_data="price")],
            [InlineKeyboardButton("üéØ –ü—Ä–∏–º–µ—Ä —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞", callback_data="entry")],
            [InlineKeyboardButton("üíß –û—Ü–µ–Ω–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏", callback_data="liquidity")],
            [InlineKeyboardButton("üìà –ù–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑", callback_data="forecast")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


# === –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ RSI ===
def calculate_rsi(prices, period=14):
    if len(prices) < period + 1:
        return []

    deltas = [prices[i] - prices[i - 1] for i in range(1, len(prices))]
    gains = [d if d > 0 else 0 for d in deltas]
    losses = [-d if d < 0 else 0 for d in deltas]

    avg_gain = sum(gains[:period]) / period
    avg_loss = sum(losses[:period]) / period if sum(losses[:period]) > 0 else 1e-10

    rsi_values = [50.0] * len(prices)  # –ó–∞–ø–æ–ª–Ω—è–µ–º –∑–∞–≥–ª—É—à–∫–æ–π
    for i in range(period, len(gains)):
        avg_gain = (avg_gain * (period - 1) + gains[i]) / period
        avg_loss = (avg_loss * (period - 1) + losses[i]) / period
        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))
        rsi_values[i] = rsi

    return rsi_values


# === –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ RSI ===
async def send_rsi_chart(chat_id, context):
    url = "https://min-api.cryptocompare.com/data/v2/histominute "
    params = {
        "fsym": "BTC",
        "tsym": "USD",
        "limit": 100,
        "aggregate": 5
    }

    try:
        response = requests.get(url, params=params, timeout=10)
        if response.status_code != 200:
            raise Exception(f"HTTP {response.status_code}")

        data = response.json().get("Data", {}).get("Data", [])
        closes = [float(item["close"]) for item in data]
        rsi_values = calculate_rsi(closes)

        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(10, 4))
        plt.plot(rsi_values, label="RSI")
        plt.axhline(30, color="red", linestyle="--", alpha=0.3)
        plt.axhline(70, color="green", linestyle="--", alpha=0.3)
        plt.title("RSI –¥–ª—è BTC/USD")
        plt.xlabel("–ü–µ—Ä–∏–æ–¥—ã")
        plt.ylabel("–ó–Ω–∞—á–µ–Ω–∏–µ RSI")
        plt.grid(True)
        plt.legend()
        plt.tight_layout()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±–∞–π—Ç—ã
        img_byte_arr = BytesIO()
        plt.savefig(img_byte_arr, format='png')
        plt.close()
        img_byte_arr.seek(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await context.bot.send_photo(chat_id=chat_id, photo=InputFile(img_byte_arr, filename="rsi.png"))

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ RSI: {e}")
        await context.bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ RSI.")


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏ ===
async def rsi_handler(query, context):
    chat_id = query.message.chat_id
    await send_rsi_chart(chat_id, context)


async def price_handler(query, context):
    if not is_internet_available():
        text = "üåê –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞."
    else:
        try:
            url = "https://min-api.cryptocompare.com/data/price "
            params = {"fsym": "BTC", "tsyms": "USD"}
            response = requests.get(url, params=params, timeout=10)
            if response.status_code != 200:
                raise Exception(f"HTTP {response.status_code}")

            price = response.json().get("USD", None)
            if not price:
                raise Exception("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

            text = f"üí∞ BTC/USDT: ${price:.2f}"
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–µ–Ω–µ: {e}")
            text = "üí∞ BTC/USDT: $62,000 (–¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)"

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=text, reply_markup=reply_markup)


# === –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
async def entry_handler(query, context):
    text = "üéØ –ü—Ä–∏–º–µ—Ä —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞: $63,000"
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=text, reply_markup=reply_markup)


async def liquidity_handler(query, context):
    text = "üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø–æ BTC/USDT –≤—ã—Å–æ–∫–∞—è."
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=text, reply_markup=reply_markup)


async def forecast_handler(query, context):
    text = "üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é: –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ä–æ—Å—Ç –¥–æ $65,000"
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=text, reply_markup=reply_markup)


# === –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã BTC/USDT ===
async def auto_update_price(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.chat_id

    try:
        url = "https://min-api.cryptocompare.com/data/price "
        params = {"fsym": "BTC", "tsyms": "USD"}
        response = requests.get(url, params=params, timeout=10)
        if response.status_code != 200:
            raise Exception(f"HTTP {response.status_code}")

        price = response.json().get("USD", None)
        if not price:
            raise Exception("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        message = f"üîÑ BTC/USDT: ${price:.2f} (–∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)"
        await context.bot.send_message(chat_id=chat_id, text=message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        await context.bot.send_message(chat_id=chat_id, text="üîÑ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É BTC/USDT")


# === –ö–æ–º–∞–Ω–¥–∞ /subscribe ‚Äî –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω ===
async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    await context.bot.send_message(chat_id=chat_id, text="‚úÖ –í–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω BTC/USDT (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)")
    context.job_queue.run_repeating(auto_update_price, interval=300, chat_id=chat_id)


# === –ö–æ–º–∞–Ω–¥–∞ /unsubscribe ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω ===
async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    current_jobs = context.job_queue.get_jobs_by_name(str(chat_id))
    for job in current_jobs:
        job.schedule_removal()
    await context.bot.send_message(chat_id=chat_id, text="‚ùå –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –æ—Ç–∫–ª—é—á–µ–Ω–æ.")


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ===
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", start))
    app.add_handler(CommandHandler("subscribe", subscribe))
    app.add_handler(CommandHandler("unsubscribe", unsubscribe))

    # –ö–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(button_click))

    # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω
    await app.initialize()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()


# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    import asyncio
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())